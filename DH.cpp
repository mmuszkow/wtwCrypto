#include "stdinc.h"

#define SystemFunction036 NTAPI SystemFunction036
#include <NTSecAPI.h> // for RtlGenRandom
#undef SystemFunction036

#include "DH.h"
#include <openssl/bn.h>

namespace wtwCrypto {
	const BYTE DH::PRIME[KEYSIZEBYTES] = {
		0xdb, 0x4f, 0xfc, 0x89, 0x15, 0x12, 0x0c, 0x1d, 
		0xb3, 0x64, 0x27, 0x19, 0x6c, 0x1d, 0xeb, 0x71, 
		0x56, 0x58, 0x2c, 0x7f, 0x40, 0x7f, 0xa8, 0x63, 
		0xf1, 0x6b, 0x3d, 0x94, 0x3c, 0xce, 0x75, 0x73, 
		0xce, 0x0a, 0x2d, 0xe5, 0x0e, 0xea, 0x61, 0x60, 
		0x99, 0x2f, 0xc6, 0xf4, 0x2e, 0xf1, 0x04, 0xbf, 
		0xf0, 0xee, 0xdb, 0xfa, 0x71, 0x94, 0xf4, 0x00, 
		0x68, 0x76, 0x6e, 0x06, 0xa7, 0xce, 0xc3, 0xdc, 
		0x9b, 0xf9, 0xd1, 0x47, 0xe8, 0x13, 0xf0, 0xcc, 
		0x34, 0xd9, 0x38, 0xd6, 0x1b, 0xd0, 0x03, 0x2d, 
		0xbc, 0x7a, 0x18, 0x25, 0x03, 0x46, 0x01, 0x1a, 
		0x6e, 0x63, 0xc2, 0x63, 0x3f, 0xf2, 0xf9, 0x49, 
		0x5d, 0xd6, 0x6c, 0x56, 0x85, 0xf6, 0x5f, 0x29, 
		0xe5, 0xc5, 0xe7, 0x08, 0x7f, 0x68, 0xbc, 0xe8, 
		0xa7, 0xa6, 0x89, 0x67, 0xbd, 0xb9, 0xbc, 0xc4, 
		0x54, 0x23, 0x12, 0x0c, 0x41, 0x2a, 0x8e, 0x23
	};

	const BYTE DH::GENERATOR[KEYSIZEBYTES] = {
		0xaa, 0xe1, 0xe8, 0x3f, 0xa8, 0x4d, 0xff, 0xee, 
		0x1b, 0x25, 0x14, 0x9f, 0x19, 0x61, 0xba, 0xa2, 
		0x81, 0xeb, 0xa2, 0x26, 0xf5, 0xcd, 0x5d, 0x87, 
		0x1c, 0x26, 0x60, 0x15, 0x09, 0x99, 0xb4, 0x7c, 
		0x46, 0xab, 0xe1, 0x8b, 0x28, 0xde, 0xdc, 0x5e, 
		0xa3, 0x3b, 0x86, 0x05, 0xda, 0xaf, 0x52, 0xcf, 
		0x30, 0x5d, 0x1f, 0x2e, 0xeb, 0x02, 0x66, 0xc8, 
		0x2e, 0x70, 0xfa, 0x74, 0x6c, 0xc6, 0x34, 0xf3, 
		0x38, 0x57, 0x22, 0xc4, 0x13, 0x7a, 0x50, 0xa1, 
		0x08, 0xe0, 0x3d, 0x6b, 0x20, 0x9e, 0x31, 0x18, 
		0xc3, 0x7c, 0x63, 0x1d, 0xcc, 0xf0, 0x17, 0xd4, 
		0xcc, 0xe6, 0x23, 0xbc, 0x21, 0x87, 0x9b, 0xfe, 
		0x8e, 0x0f, 0x08, 0x7d, 0x8c, 0x42, 0xcd, 0x8c, 
		0xd2, 0xec, 0x4b, 0x7b, 0x7d, 0x42, 0x54, 0x3a, 
		0x17, 0xe4, 0xc1, 0x23, 0x2f, 0xdf, 0x6c, 0x51, 
		0x41, 0x96, 0xdb, 0xf8, 0xae, 0x7b, 0xed, 0xad
	};

	BOOL DH::ModExpo(
		const BYTE *pbBase, 
		const BYTE *pbExpo, DWORD cbExpo, 
		const BYTE *pbMod, DWORD cbMod, 
		BYTE *pbResult) {	
		
		BIGNUM* base = BN_bin2bn(pbBase, cbMod, NULL);
		BIGNUM* expo = BN_bin2bn(pbExpo, cbExpo, NULL);
		BIGNUM* mod = BN_bin2bn(pbMod, cbMod, NULL);
		BIGNUM* res = BN_new();
		BN_CTX* ctx = BN_CTX_new();
		BOOL	ret = FALSE;
		
		if(!base || !expo || !mod || !res || !ctx) 
			goto free_mem;

		if(!BN_mod_exp(res, base, expo, mod, ctx))
			goto free_mem;

		if(!BN_bn2bin(res, pbResult))
			goto free_mem;

		ret = TRUE;

	free_mem:
		if(base) BN_free(base);
		if(expo) BN_free(expo);
		if(mod) BN_free(mod);
		if(res) BN_free(res);
		if(ctx)	BN_CTX_free(ctx);

		return ret;
	}

	void DH::recreateKeys() {
		publicKeyGenerated = false;
		sessionKeyValid = false;

		if(RtlGenRandom(secretKey, KEYSIZEBYTES) != TRUE)
			return;
		
		if(ModExpo(GENERATOR, secretKey, KEYSIZEBYTES, PRIME, KEYSIZEBYTES, publicKey) != TRUE)
			return;

		publicKeyGenerated = true;
	}

	std::wstring DH::key2hex(const BYTE* key) {
		wchar_t hex[(DH::KEYSIZEBYTES<<1) + 1];
		wchar_t bhex[4];
		
		if(!key) return L"ERROR";

		for(int i=0; i<DH::KEYSIZEBYTES; i++) {
			swprintf_s(bhex, 3, L"%.2X", key[i]);
			hex[i<<1] = bhex[0];
			hex[(i<<1)+1] = bhex[1];
		}
		hex[DH::KEYSIZEBYTES<<1] = 0;

		return hex;
	}

	bool DH::hex2key(const std::wstring& hex, BYTE* key) {
		wchar_t bhex[2];
		const wchar_t* hexS = hex.c_str();

		if(hex.size() != (DH::KEYSIZEBYTES<<1))
			return false;

		for(int i=0; i<(DH::KEYSIZEBYTES<<1); i+=2) {
			bhex[0] = hexS[i];
			bhex[1] = hexS[i+1];
			if(!iswxdigit(bhex[0]) || !iswxdigit(bhex[1])) {
				return false;
			}

			bhex[0] = towupper(bhex[0]);
			bhex[1] = towupper(bhex[1]);
			iswdigit(bhex[0]) ?	bhex[0] -= 0x30 : bhex[0] -= 0x37;
			iswdigit(bhex[1]) ?	bhex[1] -= 0x30 : bhex[1] -= 0x37;
			key[i>>1] = ((bhex[0]<<4)&0xF0)|(bhex[1] & 0xF);
		}

		return true;
	}
};
